(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{121:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return p})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return u})),a.d(t,"default",(function(){return l}));var n=a(3),r=a(7),i=(a(0),a(131)),o=["components"],p={title:"Iteratori"},c={unversionedId:"bitne-strukture-podataka/iteratori",id:"bitne-strukture-podataka/iteratori",isDocsHomePage:!1,title:"Iteratori",description:"iteratori, begin(), end(), rbegin(), rend(), next(), prev(), advance() i slicno",source:"@site/docs/bitne-strukture-podataka/iteratori.md",slug:"/bitne-strukture-podataka/iteratori",permalink:"/docs/bitne-strukture-podataka/iteratori",editUrl:"https://github.com/x-fer/natpro/tree/main/website/docs/bitne-strukture-podataka/iteratori.md",version:"current",lastUpdatedBy:"Petar Mihalj",lastUpdatedAt:1628712070,sidebar:"materijaliSidebar",previous:{title:"Map",permalink:"/docs/bitne-strukture-podataka/map"},next:{title:"Ostale strukture",permalink:"/docs/bitne-strukture-podataka/ostale-strukture"}},u=[],b={toc:u};function l(e){var t=e.components,a=Object(r.a)(e,o);return Object(i.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"iteratori, begin(), end(), rbegin(), rend(), next(), prev(), advance() i slicno"),Object(i.b)("p",null,"Tijekom rada s ",Object(i.b)("em",{parentName:"p"},"containerima")," kao \u0161to su ",Object(i.b)("inlineCode",{parentName:"p"},"vector")," i ",Object(i.b)("inlineCode",{parentName:"p"},"set"),", \u010desto \u0107ete se susretati s funkcijama koje kao parametre primaju ",Object(i.b)("em",{parentName:"p"},"iteratore"),". U ovom \u010dlanku \u0107emo govoriti o iteratorima i dat \u0107emo nekoliko primjera iteratora za koje biste trebali znati."),Object(i.b)("p",null,"Iteratori slu\u017ee kao pokaziva\u010di na elemente odre\u0111enih ",Object(i.b)("em",{parentName:"p"},"containera"),". Pomo\u0107u njih mo\u017eemo, kao \u0161to im ime govori, iterirati kroz elemente odre\u0111enih struktura te ih koristiti kao parametre u brojnim algoritmima standardne biblioteke. Podacima na koje iteratori pokazuju pristupamo koriste\u0107i operator ",Object(i.b)("inlineCode",{parentName:"p"},"*"),"."),Object(i.b)("p",null,"Uzmimo za primjer jedan ",Object(i.b)("inlineCode",{parentName:"p"},"set")," i jedan ",Object(i.b)("inlineCode",{parentName:"p"},"vector"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"set<int> s = {1, 2, 3, 4, 5, 6}; // jos jedan nacin za dodati elemente u set\nvector<int> v = {1, 1, 2, 3, 5, 8}; // jos jedan nacin za dodati elemente u vector\n")),Object(i.b)("p",null,"Prva funkcija kojom \u0107emo se baviti je \u010dlanska funkcija ",Object(i.b)("inlineCode",{parentName:"p"},"begin"),". Ona vra\u0107a iterator na prvi element niza, pa bi za na\u0161e ",Object(i.b)("em",{parentName:"p"},"containere")," iz primjera to izgledalo ovako (sjetimo se da podacima pristupamo koriste\u0107i operator ",Object(i.b)("inlineCode",{parentName:"p"},"*"),"):"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'cout << *s.begin() << "\\n"; // ispisuje 1\ncout << *v.begin() << "\\n"; // ispisuje 1\n')),Object(i.b)("p",null,"Druga funkcija je funkcija ",Object(i.b)("inlineCode",{parentName:"p"},"end"),". Ona vra\u0107a iterator na poziciju ",Object(i.b)("strong",{parentName:"p"},"nakon")," posljednjeg elementa niza. Mo\u017eemo je koristiti u for petlji da bismo provjerili jesmo li do\u0161li do kraja iteracije, a tako\u0111er se koristi u mno\u0161tvu funkcija o kojima \u0107emo kasnije vi\u0161e govoriti."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'// it++ mijenja iterator tako da pokazuje na sljede\u0107i element niza\nfor(auto it = s.begin(); it != s.end(); it++) {\n    cout << *it << " ";\n}\n')),Object(i.b)("p",null,"Ovaj isje\u010dak koda \u0107e ispisati sve \u010dlanove seta."),Object(i.b)("p",null,"Sli\u010dne funkcijama ",Object(i.b)("inlineCode",{parentName:"p"},"begin")," i ",Object(i.b)("inlineCode",{parentName:"p"},"end")," su funkcije ",Object(i.b)("inlineCode",{parentName:"p"},"rbegin")," i ",Object(i.b)("inlineCode",{parentName:"p"},"rend")," koje vra\u0107aju ",Object(i.b)("em",{parentName:"p"},"reverse iteratore"),", odnosno iterator koji pokazuje na posljednji element niza i iterator koji pokazuje na poziciju ",Object(i.b)("strong",{parentName:"p"},"prije")," prvog elementa niza."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'for(auto it = s.rbegin(); it != s.rend(); it++) {\n    cout << *it << " ";\n}\n')),Object(i.b)("p",null,"Ovaj isje\u010dak \u0107e ispisati sve \u010dlanove seta, ali obrnutim redoslijedom."),Object(i.b)("p",null,"Funkcije ",Object(i.b)("inlineCode",{parentName:"p"},"next")," i ",Object(i.b)("inlineCode",{parentName:"p"},"prev")," kao argumente primaju iterator i cijeli broj ",Object(i.b)("inlineCode",{parentName:"p"},"n"),", a vra\u0107aju iterator za ",Object(i.b)("inlineCode",{parentName:"p"},"n")," pozicija ispred ili iza zadanog iteratora. Ako ",Object(i.b)("inlineCode",{parentName:"p"},"n")," nije zadan, podrazumijevana vrijednost je 1. Ove funkcije ne mijenjaju poziciju zadanog iteratora."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'cout << *next(s.begin(), 2) << "\\n"; // ispisuje 3\ncout << *prev(s.end(), 2) << "\\n"; // ispisuje 5\n')),Object(i.b)("p",null,"Funkcija ",Object(i.b)("inlineCode",{parentName:"p"},"advance")," kao argumente prima iterator i cijeli broj ",Object(i.b)("inlineCode",{parentName:"p"},"n"),", te ",Object(i.b)("strong",{parentName:"p"},"mijenja")," zadani iterator tako da mu pomakne poziciju za ",Object(i.b)("inlineCode",{parentName:"p"},"n")," mjesta."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},'auto it = s.begin();\ncout << *it << "\\n"; // ispisuje 1\n\nadvance(it, 3);\ncout << *it << "\\n"; // ispisuje 4\n\nadvance(it, -1);\ncout << *it << "\\n"; // ispisuje 3\n')),Object(i.b)("p",null,"U poglavlju o sortiranju i pretra\u017eivanju \u0107emo pri\u010dati vi\u0161e o prakti\u010dnim primjenama iteratora."))}l.isMDXComponent=!0},131:function(e,t,a){"use strict";a.d(t,"a",(function(){return l})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=r.a.createContext({}),b=function(e){var t=r.a.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},l=function(e){var t=b(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),l=b(a),s=n,m=l["".concat(o,".").concat(s)]||l[s]||j[s]||i;return a?r.a.createElement(m,p(p({ref:t},u),{},{components:a})):r.a.createElement(m,p({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=s;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:n,o[1]=p;for(var u=2;u<i;u++)o[u]=a[u];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}s.displayName="MDXCreateElement"}}]);